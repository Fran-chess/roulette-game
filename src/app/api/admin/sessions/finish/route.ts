import { NextResponse } from 'next/server';
import { supabaseAdmin } from '@/lib/supabase';
import { getAuthenticatedAdminId } from '@/lib/adminAuth';

/**
 * Endpoint para finalizar una sesi√≥n de juego
 * Marca la sesi√≥n como completada y finaliza todos los participantes activos
 */
export async function POST(request: Request) {
  try {
    // Verificar que supabaseAdmin est√© disponible
    if (!supabaseAdmin) {
      console.error('API /admin/sessions/finish: supabaseAdmin no est√° disponible');
      return NextResponse.json(
        { error: 'Error de configuraci√≥n del servidor' },
        { status: 500 }
      );
    }

    const adminId = await getAuthenticatedAdminId();
    if (!adminId) {
      return NextResponse.json(
        { error: 'No autorizado' },
        { status: 401 }
      );
    }
    void adminId;

    // Parsear el cuerpo de la solicitud
    const { sessionId } = await request.json();

    console.log(`üèÅ FINISH: Iniciando finalizaci√≥n de sesi√≥n ${sessionId}`);

    // Validar que se proporcione el sessionId
    if (!sessionId) {
      return NextResponse.json(
        { error: 'ID de sesi√≥n requerido' },
        { status: 400 }
      );
    }

    // Verificar que la sesi√≥n existe en game_sessions
    const { data: existingSession, error: checkError } = await supabaseAdmin
      .from('game_sessions')
      .select('id, session_id, status')
      .eq('session_id', sessionId)
      .single();

    if (checkError || !existingSession) {
      console.error('‚ùå FINISH: Error al verificar sesi√≥n:', checkError);
      return NextResponse.json(
        { error: 'Sesi√≥n no encontrada' },
        { status: 404 }
      );
    }

    // Verificar que la sesi√≥n no est√© ya finalizada
    if (existingSession.status === 'completed' || existingSession.status === 'archived') {
      console.log(`üì± FINISH: Sesi√≥n ${sessionId} ya est√° finalizada (${existingSession.status})`);
      return NextResponse.json(
        { error: 'La sesi√≥n ya est√° finalizada' },
        { status: 400 }
      );
    }

    console.log(`üì± FINISH: Sesi√≥n ${sessionId} encontrada, estado actual: ${existingSession.status}`);

    // Finalizar todos los participantes activos de la sesi√≥n
    const { error: participantsUpdateError } = await supabaseAdmin
      .from('participants')
      .update({
        status: 'completed',
        updated_at: new Date().toISOString()
      })
      .eq('session_id', sessionId)
      .in('status', ['registered', 'playing']);

    if (participantsUpdateError) {
      console.error('‚ùå FINISH: Error al finalizar participantes:', participantsUpdateError);
      return NextResponse.json(
        { error: 'Error al finalizar participantes' },
        { status: 500 }
      );
    }

    console.log(`‚úÖ FINISH: Participantes activos finalizados para sesi√≥n ${sessionId}`);

    // Actualizar el estado de la sesi√≥n en game_sessions
    const { data: updatedSession, error: updateError } = await supabaseAdmin
      .from('game_sessions')
      .update({
        status: 'completed',
        updated_at: new Date().toISOString()
      })
      .eq('session_id', sessionId)
      .select()
      .single();

    if (updateError) {
      console.error('‚ùå FINISH: Error al finalizar sesi√≥n:', updateError);
      return NextResponse.json(
        { error: 'Error al finalizar la sesi√≥n' },
        { status: 500 }
      );
    }

    console.log(`‚úÖ FINISH: Sesi√≥n ${sessionId} finalizada exitosamente`);

    // Tambi√©n marcar como completadas las jugadas relacionadas (si existen)
    const { error: playsUpdateError } = await supabaseAdmin
      .from('plays')
      .update({
        status: 'completed',
        updated_at: new Date().toISOString()
      })
      .eq('session_id', sessionId);

    if (playsUpdateError) {
      console.warn('‚ö†Ô∏è FINISH: Advertencia al actualizar jugadas relacionadas:', playsUpdateError);
      // No fallar por esto, ya que las jugadas son opcionales
    }

    // Respuesta exitosa
    return NextResponse.json({
      success: true,
      message: 'Sesi√≥n finalizada exitosamente',
      session: updatedSession
    });

  } catch (error) {
    console.error('‚ùå FINISH: Error en endpoint de finalizaci√≥n de sesi√≥n:', error);
    return NextResponse.json(
      { 
        error: 'Error interno del servidor',
        details: error instanceof Error ? error.message : 'Error desconocido'
      },
      { status: 500 }
    );
  }
} 